1
00:00:00,870 --> 00:00:06,210
Ya sabemos lo básico acerca de los componentes cómo crearlo cómo trabajar con ellos a grandes rasgos

2
00:00:06,530 --> 00:00:12,150
y ahora vamos a hablar acerca de los looks de los componentes de acuerdo o los eventos del ciclo de

3
00:00:12,150 --> 00:00:14,220
vida de un componente.

4
00:00:14,220 --> 00:00:20,070
Los looks de los componentes son eventos que se ejecutan en un momento dado el ciclo de vida del componente.

5
00:00:20,070 --> 00:00:25,200
Es decir son eventos que se van a lanzar dependiendo del estado en el que esté el componente.

6
00:00:25,200 --> 00:00:30,600
Por ejemplo cuando iniciamos el componente cuando vamos a algún cambio en el componente etcétera uno

7
00:00:30,600 --> 00:00:33,270
de los jockeys más importantes es el NI-NI.

8
00:00:33,330 --> 00:00:39,750
De acuerdo aquí estamos trabajando con el componente de cursos que acabamos de crear y automáticamente

9
00:00:39,750 --> 00:00:45,840
este componente incluye el Ninet que se implementa porque es una interfaz y nos permite utilizar este

10
00:00:45,840 --> 00:00:51,480
método el NG o Ninet que es el método que se ejecuta nada más cargar un componente.

11
00:00:51,480 --> 00:00:56,700
Vamos a ver el ejemplo en algún otro componente por ejemplo en el componente de videojuego.

12
00:00:56,880 --> 00:01:02,700
Aquí lo vamos a ver vamos a ver cómo trabajar con él o niñito o niñita.

13
00:01:02,700 --> 00:01:09,810
Hay que importarlo por aquí la clase y luego implementar un implement de esta interfaz hay que implementarlo

14
00:01:09,810 --> 00:01:18,630
por aquí o niñito y esto nos obliga a crear el código y esto no obliga a crear el método NG on init

15
00:01:18,810 --> 00:01:20,500
en nuestro componente.

16
00:01:21,060 --> 00:01:27,070
Qué va a pasar aquí que se va a ejecutar ese método cada vez que carga el componente nada más cargarlo

17
00:01:27,080 --> 00:01:37,190
en debió poner un consolero que diga ok init ejecutado vale.

18
00:01:37,730 --> 00:01:43,740
Entonces cuando yo actualice mi pantalla voy a abrir mis herramientas de desarrollador a la consola

19
00:01:44,160 --> 00:01:50,280
y fíjate lo que pasa que si estoy hizo la pantalla primero se ejecuta el constructor porque lo primero

20
00:01:50,280 --> 00:01:58,190
que se ejecuta en cualquier clase y después se ejecuta el online es decir que el método que se ejecuta

21
00:01:58,190 --> 00:02:05,180
no vamos que nada más cargar el componente es este método de aquí otro jug importante es el duché.

22
00:02:05,220 --> 00:02:07,490
De acuerdo vamos a importarlo por aquí.

23
00:02:07,770 --> 00:02:15,570
CHEC vale este método el método duché se ejecuta cada vez que se produce algún cambio en el componente

24
00:02:15,570 --> 00:02:20,340
o en la aplicación de angular y es un método que se va a estar ejecutando frecuentemente cada vez que

25
00:02:20,340 --> 00:02:24,160
sucede algo de esto vamos a implementarlo también por aquí.

26
00:02:24,630 --> 00:02:24,960
CHEC

27
00:02:27,810 --> 00:02:37,130
y el evento Duche o esto se va a ejecutar cuando se produzca algún cambio en el componente o en la aplicación

28
00:02:37,130 --> 00:02:43,190
de angulado en general vale para eso automáticamente esta interfaz necesita que nosotros definamos el

29
00:02:43,190 --> 00:02:55,340
método NG check check y vamos a ver que si nosotros hacemos un consolé punto lo ponemos duché ejecutado

30
00:02:58,320 --> 00:03:04,370
cerramos un punto y coma o guardamos y actualizamos la pantalla vamos a ver en la consola del navegador

31
00:03:05,600 --> 00:03:12,680
cómo me dice duché ejecutado cada vez que se produce algún tipo de cambio en mi código.

32
00:03:12,680 --> 00:03:18,020
Por ejemplo si yo me creara un método por aquí que fuera cambio artículo

33
00:03:21,980 --> 00:03:33,280
y aquí pues yo le asignó otro valor a título disputo título es igual a nuevo título del componente Fierro

34
00:03:33,290 --> 00:03:40,640
con punto y coma y este método lo llamo desde mi vista es decir yo me puedo crear aquí un botón en un

35
00:03:40,640 --> 00:03:41,060
botón

36
00:03:44,170 --> 00:03:45,400
y utilizo el evento click.

37
00:03:45,420 --> 00:03:51,360
De acuerdo con la directiva de los paréntesis que hizo este evento clic para llamar a un evento angular

38
00:03:51,360 --> 00:03:53,860
se utilizan los paréntesis y el número del evento.

39
00:03:53,860 --> 00:04:01,500
Entonces llamo al método de mi clase de mi componente que se llama cambiar título lo llaman por aquí

40
00:04:04,610 --> 00:04:13,070
vale y entonces aquí yo pongo cambiar el título guardo autorizó la pantalla y si yo borro lo que hay

41
00:04:13,070 --> 00:04:19,610
en el blog le doy a cambio el título me dice okey Duche ejecutado y además cambia el título de mi componente

42
00:04:19,610 --> 00:04:24,950
es decir que cuando yo modifico el valor de cualquier propiedad cuando haya algún cambio en los componentes

43
00:04:24,950 --> 00:04:28,940
de mi aplicación este check se va a estar ejecutando.

44
00:04:28,950 --> 00:04:35,060
Okey esto es útil para ciertas cosas cuando estamos desarrollando que necesitamos que alguna variable

45
00:04:35,060 --> 00:04:41,600
esté siempre actualizada recoger unos datos cada vez que haya un cambio en la aplicación o lo que sea

46
00:04:41,600 --> 00:04:47,450
esto conforme van desarrollando conforme vayamos desarrollando vamos a ver que va a ser necesario algunas

47
00:04:47,450 --> 00:04:50,750
veces utilizar este método duché.

48
00:04:51,290 --> 00:04:54,200
Otro juego interesante es el ónde Strait.

49
00:04:55,010 --> 00:05:00,080
Este método de jug dentro tendremos que importarlo por aquí

50
00:05:03,220 --> 00:05:11,180
nos va a servir para que se ejecute algo antes de eliminar la instancia de un componente.

51
00:05:11,220 --> 00:05:25,120
Vale entonces vamos a utilizar el LG Strait y vamos a poner un consolé lock on Destroy ejecutado.

52
00:05:25,350 --> 00:05:32,760
Esto se va a ejecutar solamente cuando yo vaya a eliminar mi componente Balet es decir que solamente

53
00:05:32,760 --> 00:05:39,780
se va a ejecutar cuando yo decida eliminar ese componente o destruir ese componente dentro del ciclo

54
00:05:39,780 --> 00:05:46,650
de vida pues un componente se va a crear se crea se permanece o lo que sea y luego pues puede ser que

55
00:05:47,100 --> 00:05:47,940
se elimine.

56
00:05:48,690 --> 00:05:55,120
Entonces cómo podríamos ver un ejemplo de esto pues yo podría hacer UNIV aquí podría hacer un NG if

57
00:05:55,200 --> 00:06:03,000
en el componente de videojuego joie y tener una propiedad dentro del PP módulo apuntó component

58
00:06:05,940 --> 00:06:09,840
de HP compone un punto TS perdón tener aquí una propiedad que sea

59
00:06:13,180 --> 00:06:23,650
mostrar videojuegos que sea un volcán y que por default venga truc y también voy a tener un método que

60
00:06:23,650 --> 00:06:32,950
me va a permitir cambiar el valor de esa propiedad ocultar videojuegos vale y entonces me va a cambiar

61
00:06:32,950 --> 00:06:38,470
el valor de la propiedad me va a hacer un disputo mostrar videojuegos vamos a ponerlo bien

62
00:06:41,440 --> 00:06:44,070
iguala false y esto lo voy a ejecutar.

63
00:06:44,080 --> 00:06:47,740
Cuando yo lancé un evento clic para eso voy a crear un botón aquí

64
00:06:50,440 --> 00:07:00,180
Button con el evento click y voy a llamar al método de ocultar videojuegos.

65
00:07:00,420 --> 00:07:10,690
Llamo el método y aquí le voy a poner ocultar simplemente cierro el botón y aquí voy a hacer un NG IFF

66
00:07:10,780 --> 00:07:18,430
que es una directiva condicional que veremos más adelante y también que me permite hacer UNIV para mostrar

67
00:07:18,480 --> 00:07:19,400
o ocultar algo.

68
00:07:19,450 --> 00:07:31,470
Es decir que vídeojuegos solamente se va a mostrar cuando la propiedad mostrar videojuegos.

69
00:07:31,500 --> 00:07:36,700
Este truco vale en el caso de que no se va a ocultar el componente entonces voy puede actualizar la

70
00:07:36,700 --> 00:07:43,640
pantalla voy a borrar el blog de mi consola y le voy a ocultar PAMM me hice on y ejecutado.

71
00:07:43,750 --> 00:07:51,570
Ojo como yo he borrado mi componente Bare como yo he borrado mi componente decir he dejado de mostrarlo.

72
00:07:51,670 --> 00:07:56,980
Ya no se esté ejecutando este componente en la aplicación como lo he destruido.

73
00:07:56,980 --> 00:08:01,860
Se ha ejecutado este evento de acuerdo a este evento donde este jug.

74
00:08:01,900 --> 00:08:06,850
Entonces aquí podrían hacer cualquier cosa es decir cuando se borre un componente que se lance una petición

75
00:08:06,850 --> 00:08:09,590
Ayax y que hago cualquier cosa vale.

76
00:08:09,720 --> 00:08:14,690
De esta manera yo puedo jugar con los diferentes jug más importantes que hay dentro de angular.

77
00:08:14,700 --> 00:08:19,480
Vale también podría hacerme otro botón que fuera mostrar mal y vamos a ver cómo se van a lanzar lanzarlo

78
00:08:19,510 --> 00:08:29,980
otros los otros jocs mostrar Valoy y esto va a ser bueno vamos a hacer vamos a utilizar el mismo el

79
00:08:29,980 --> 00:08:36,940
mismo método pero le voy a pasar una propiedad para ser la propiedad false y aquí la propiedad de Tru

80
00:08:37,340 --> 00:08:42,940
vale y esto lo va a recibir ese método que tenemos aquí en la clase del componente PP para recibir la

81
00:08:42,940 --> 00:08:45,220
propiedad.

82
00:08:45,240 --> 00:08:54,040
Balio Iván utiliza el valio por aquí y también además vamos a hacer un NG y cómo hacer un IP para mostrar

83
00:08:59,170 --> 00:09:02,450
el botón de ocultar cuando mostrar.

84
00:09:02,500 --> 00:09:06,950
Teatru y cuando esté a false que sea el botón de Mostrar.

85
00:09:06,980 --> 00:09:11,060
Vale vamos a verlo tenemos el botón de ocultar.

86
00:09:11,060 --> 00:09:16,130
Vale vamos a ponerlo en la consola tenemos el botón de ocultar lo oculto y se va a ejecutar el Destroy.

87
00:09:16,150 --> 00:09:20,030
Efectivamente si lo muestro se me ejecuta.

88
00:09:20,050 --> 00:09:25,210
El constructor se ejecuta mi Bonini porque es el primer método que se va a ejecutar siempre y cuando

89
00:09:25,210 --> 00:09:28,710
cargue un componente y luego además ejecuta el check.

90
00:09:28,720 --> 00:09:34,090
Es decir porque ha habido un cambio en la aplicación en general y había un cambio en mi componente con

91
00:09:34,090 --> 00:09:39,130
lo cual como ha habido cambio en mi componente incluso si yo vuelvo a ejecutar el cambiar el título

92
00:09:39,250 --> 00:09:43,530
se vuelve a ejecutar el check porque detecta cambios en el componente.

93
00:09:43,530 --> 00:09:48,970
Entonces de manera tan sencilla hemos visto cómo trabajar con los bugs del ciclo de vida de un componente

94
00:09:49,420 --> 00:09:49,900
angular.
