1
00:00:00,900 --> 00:00:11,620
Para esta parte del curso vamos a crear una nueva carpeta que se va a llamar y Taipe scrip.

2
00:00:11,630 --> 00:00:13,680
Vale y aquí vamos a estar trabajando.

3
00:00:13,680 --> 00:00:20,940
Antes de nada vamos a ver cómo crear una clase o simular una clase en JavaScript utilizando Gyatso de

4
00:00:20,940 --> 00:00:28,260
acuerdo que es una forma que se suele hacer bastante y pues está bien también.

5
00:00:28,260 --> 00:00:33,000
No vamos a crear un archivo HTML

6
00:00:35,580 --> 00:00:38,490
vale y aquí vamos a tener una estructura básica HTML

7
00:00:43,230 --> 00:00:49,980
HTML es HTML.

8
00:00:50,070 --> 00:01:02,280
Abrimos el FIT ponemos el meta charged VF 8 abrimos el Twitter

9
00:01:06,510 --> 00:01:21,930
Vamos a poner y they've scrip y abrimos el bodhi y cerramos el body vamos a ponerle un H1 a la página

10
00:01:21,930 --> 00:01:25,560
que va a ser Programación

11
00:01:27,780 --> 00:01:37,470
Orientada a Objetos en JS Y Taipe escribe

12
00:01:40,220 --> 00:01:41,110
OK.

13
00:01:43,520 --> 00:01:45,790
Aquí le voy a poner un párrafo

14
00:01:51,050 --> 00:01:51,710
y ya está.

15
00:01:51,770 --> 00:01:59,020
Ya la tengo lista ahora voy a cargar esta página web en este caso sería cursos JavaScript barra pop

16
00:01:59,810 --> 00:02:08,870
y scrip barra índex punto HTML cargar la página y aquí la tengo perfectamente.

17
00:02:08,900 --> 00:02:13,970
Ahora vamos a crear un archivo de JavaScript o una carpeta en este caso

18
00:02:18,620 --> 00:02:20,920
controles.

19
00:02:21,230 --> 00:02:25,490
Una carpeta que se va a llamar J.S y dentro vamos a quedar los archivos.

20
00:02:25,580 --> 00:02:28,460
Vamos a crear el primer archivo que se va a llamar 0 1

21
00:02:32,190 --> 00:02:34,990
clase guión Jayson punto.

22
00:02:35,100 --> 00:02:38,960
JS Entonces vamos a crear una especie de clase con Jackson.

23
00:02:38,970 --> 00:02:42,050
Vamos a cargar el archivo también SRC.

24
00:02:43,350 --> 00:02:46,680
JS barra cero 1 guión clase guión.

25
00:02:46,700 --> 00:02:47,470
J.

26
00:02:47,520 --> 00:02:48,570
Son.

27
00:02:48,710 --> 00:02:53,240
JS cargamos el script y vamos a empezar.

28
00:02:53,250 --> 00:02:54,920
Lo primero voy a poner un consolé log

29
00:03:01,340 --> 00:03:07,140
y abrimos la herramienta de desarrollador para ver si realmente me escupe por la consola.

30
00:03:07,200 --> 00:03:09,990
Efectivamente ya lo tenemos funcionando.

31
00:03:10,080 --> 00:03:16,560
Ahora vamos a ver cómo crear una clase de acuerdo hemos dicho que una clase dentro de cualquier lenguaje

32
00:03:16,560 --> 00:03:21,660
de programación nos sirve como molde para luego crear varias entidades de tipo varias entidades de ese

33
00:03:21,660 --> 00:03:24,270
tipo varias o varios objetos de ese tipo.

34
00:03:24,300 --> 00:03:33,990
Por ejemplo puedo tener una clase bicicleta y tener mucho método dentro de esa bicicleta y muchas propiedades

35
00:03:34,080 --> 00:03:41,070
y luego yo puedo clonar ese objeto en base a ese molde crear muchos objetos iguales o con características

36
00:03:41,070 --> 00:03:47,160
parecidas simplemente variando el valor de sus propiedades que es como cualquier objeto de la vida real

37
00:03:47,190 --> 00:03:49,390
es decir una bicicleta en una bicicleta.

38
00:03:49,410 --> 00:03:56,760
Lo único que varía entre bicicleta y bicicleta es el modelo o el tipo de freno que tiene el color etcétera.

39
00:03:56,850 --> 00:04:01,900
No es lo mismo con Programación Orientada a Objetos tenemos una clase que tiene diferentes características

40
00:04:02,020 --> 00:04:08,840
y cuando yo creo un objeto puedo ir variando su característica un poco pero al final son objetos similares.

41
00:04:08,860 --> 00:04:13,590
Vale pues eso es una forma de ver el tema de la programación orientada a objetos que iré machacando

42
00:04:13,590 --> 00:04:18,460
un poco pero para crear una clase JavaScript normal.

43
00:04:18,480 --> 00:04:24,960
Teníamos el típico prototipo que no lo vamos a ver porque es muy engorroso pero también podríamos hacerlo

44
00:04:24,960 --> 00:04:28,310
de esta manera.

45
00:04:29,910 --> 00:04:38,880
Voy a crear una clase bicicleta me creo mi variable y en un Jayson creo mi objeto vale un objeto Yeison

46
00:04:39,660 --> 00:04:46,130
normal tengo un objeto que tiene por sus propiedades subvalora vital y puedo tener diferentes propiedades.

47
00:04:46,140 --> 00:04:55,440
Por ejemplo puedo tener una propiedad que fuera el color rojo el modelo

48
00:05:00,660 --> 00:05:02,070
BMX vamos a poner

49
00:05:05,180 --> 00:05:06,320
el tipo de frenos

50
00:05:10,090 --> 00:05:15,460
de disco vamos a poner y velocidad máxima

51
00:05:20,860 --> 00:05:24,480
que van a ser 60 kilómetros por hora.

52
00:05:24,480 --> 00:05:30,280
Vale y yo tengo mis propiedades perfectamente tengo mi objeto Jayson perfectamente definido y puedo

53
00:05:30,280 --> 00:05:36,740
hacer un consolé punto los de bicicleta.

54
00:05:36,820 --> 00:05:39,270
Vale y aquí tengo mis valores.

55
00:05:39,280 --> 00:05:41,020
Hasta aquí todo genial.

56
00:05:41,080 --> 00:05:47,770
Imagínate que yo estoy trabajando en hacer una sección de una web y quiero tener diferentes variables

57
00:05:47,800 --> 00:05:50,250
y quiero tener diferentes métodos para esa sección.

58
00:05:50,290 --> 00:05:55,400
Por ejemplo una sección de un formulario de contacto que tenga diferentes cosas.

59
00:05:55,840 --> 00:06:02,440
O una sección de asistentes de una web en la cual yo tenga diferentes métodos que hagan diferentes cosas.

60
00:06:02,440 --> 00:06:08,080
Pues yo podría organizar la información de esta manera y tenerla muy bien y tener la estructura del

61
00:06:08,080 --> 00:06:10,560
programa y del código muy bien hecho y muy claro.

62
00:06:10,630 --> 00:06:18,100
Luego si yo quiero crear un método aquí que modifique por ejemplo el color puedo quedarme un método

63
00:06:18,100 --> 00:06:25,090
que sea cambiar color y esto es una propiedad Jayson igual del objeto pero voy a meterle una función

64
00:06:25,090 --> 00:06:27,710
de Carbap una función anónima.

65
00:06:27,790 --> 00:06:30,550
Vale entonces yo dentro le puedo poner

66
00:06:33,100 --> 00:06:40,750
directamente puedo pasarle como parámetro el nuevo color y a la propia propiedad color cambiarle el

67
00:06:40,750 --> 00:06:42,220
valor puedo hacer bicicleta

68
00:06:44,920 --> 00:06:45,610
apuntó

69
00:06:48,030 --> 00:06:49,020
color.

70
00:06:49,320 --> 00:06:56,790
Es igual a nuevo color lo puedo hacer así o también puede utilizar el diseño vale que haga referencia

71
00:06:56,790 --> 00:07:06,690
a esta misma clase o a este mismo objeto Yeison disputo color es decir accede dentro de este ámbito

72
00:07:07,230 --> 00:07:11,870
accede a la propiedad color y cambiar el valor por nuevo color.

73
00:07:12,330 --> 00:07:14,020
Esto lo puede hacer perfectamente.

74
00:07:14,020 --> 00:07:19,680
Vale si yo utilizo la pantalla aquí no hay ningún tipo de error al revés aquí me indica que tengo un

75
00:07:19,680 --> 00:07:27,690
método que es una función vale me dice que tuvo una función que recibió un parámetro vale yo puedo invocar

76
00:07:27,810 --> 00:07:34,880
a esta función puedo llamar al objeto Bizikleta punto y llamarme todo cambia color y le puedo hacer

77
00:07:34,870 --> 00:07:37,360
un nuevo color azul.

78
00:07:38,060 --> 00:07:44,610
Vale y este método de este propio método que me daba un consuelo de días para ver qué tiene de nuevo

79
00:07:46,760 --> 00:07:52,290
el objeto entero vale la clase entera la clase simulada entera que estamos haciendo.

80
00:07:54,330 --> 00:07:57,770
Efectivamente me cambio el color y ahora es azul vale.

81
00:07:58,260 --> 00:08:07,920
De igual forma yo podría llamarlo desde la consola bicicleta punto color y pasarle color marrón color

82
00:08:07,920 --> 00:08:09,120
no cambia color

83
00:08:11,760 --> 00:08:15,330
cambia color y lo puedo cambiar.

84
00:08:15,420 --> 00:08:19,650
Vale efectivamente me cambia el color e incluso acceder a las propiedades directamente y cambiarle el

85
00:08:19,650 --> 00:08:31,610
valor vale bicicleta punto color es igual a amarillo vale y esto automáticamente se hago con sólo el

86
00:08:31,620 --> 00:08:33,870
ojo de bicicleta

87
00:08:37,650 --> 00:08:45,600
pues tengo el nuevo color asignado vale entonces esta manera de organizar el código para mí la veo muy

88
00:08:45,600 --> 00:08:50,520
buena cuando no podemos utilizar una programación orientada a objetos más potente o más grande como

89
00:08:50,520 --> 00:08:55,440
la que vamos a ver a continuación de acuerdo que ya sí que se puede utilizar pero quizá no sea compatible

90
00:08:55,440 --> 00:08:57,870
con todos los navegadores antiguos o lo que sea.

91
00:08:58,380 --> 00:09:05,910
Entonces esta manera de hacer una clase una clase bicicleta pues está muy bien o simplemente de organizar

92
00:09:05,910 --> 00:09:12,090
nuestras funciones y variables de esta manera yo lo veo muy bueno también podría seguir creando métodos

93
00:09:12,090 --> 00:09:19,180
como éste que modifiquen cualquier cosa o que hagan cualquier tipo de acción perfectamente lo puede

94
00:09:19,180 --> 00:09:21,010
hacer sin ningún tipo de problema.

95
00:09:21,060 --> 00:09:28,380
También en una página web real imagínate que tengo una funcionalidad para seguir y dejar de seguir usuarios

96
00:09:28,910 --> 00:09:36,750
pues yo podría organizar mi código y mis diferentes funciones mi función para seguir mi función para

97
00:09:36,750 --> 00:09:43,260
dejar de seguir mi función para lo que sea organizarlo todo en la misma entidad o en el mismo fichero

98
00:09:43,290 --> 00:09:46,330
y que todo esté organizado en un objeto de este tipo vale.

99
00:09:46,470 --> 00:09:54,180
De forma que la entidad sería el seguimiento vale y todo es un método son métodos que están relacionados

100
00:09:54,180 --> 00:10:00,690
con el seguimiento que hacen una acción con esa funcionalidad y luego tener diferentes propiedades que

101
00:10:00,690 --> 00:10:01,990
serían las variables.

102
00:10:02,010 --> 00:10:09,030
Estos son las propiedades que son variables y esto es una función o un método en este caso o acción

103
00:10:09,420 --> 00:10:16,080
de la clase en donde yo puedo en cualquier tipo de funcionalidad que yo tenga abstraer un poco y concebirla

104
00:10:16,080 --> 00:10:22,860
como si fuera una clase para luego organizar mi código de una manera muchísimo mejor vale y luego abajo

105
00:10:22,860 --> 00:10:28,530
puedes ejecutar una vez que tengo ya la clase definida o lo que sea puede importarla en cualquier parte

106
00:10:28,590 --> 00:10:35,100
o llamar o llamar esta clase desde cualquier otro sitio así que ya hemos visto la manera más sencilla

107
00:10:35,100 --> 00:10:40,050
de programar orientada objetos en JavaScript y a partir de ahora vamos a empezar ya Contacts Creep y

108
00:10:40,050 --> 00:10:46,200
vamos a ver un montón de cosas más acerca de programación en cada objeto y de este pseudo lenguaje o

109
00:10:46,200 --> 00:10:53,100
este Supercell de JavaScript desarrollado por Microsoft que se llama Taipe script y que también me muestra

110
00:10:53,100 --> 00:10:54,690
utilizando en la parte angular.
